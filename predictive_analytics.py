# -*- coding: utf-8 -*-
"""predictive_anallytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_0UgcBzbkS2ygyumMQHxH_7kUi34gNDV

1. Import Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor

"""2. Load Dataset"""

url = 'https://raw.githubusercontent.com/sahraazlqdh/my-datasets/main/insurance.csv'
df = pd.read_csv(url)
df

"""Output kode di atas memberikan informasi sebagai berikut:

- Ada 1.228 baris (records atau jumlah pengamatan) dalam dataset.
- Terdapat 7 kolom yaitu: age, sex, bmi, children, smoker, region, charges

3. Initial Exploration
"""

print(df.info())

"""Dari output terlihat bahwa:

Terdapat 3 kolom dengan tipe object, yaitu: sex, smoker, dan region. Kolom ini merupakan categorical features (fitur non-numerik).
Terdapat 2 kolom numerik dengan tipe data float64 yaitu: bmi dan charges. Ini merupakan fitur numerik yang merupakan hasil pengukuran secara fisik.
Terdapat 2 kolom numerik dengan tipe data int64, yaitu: age dan children. Kolom ini merupakan target fitur kita.
"""

print(df.describe())

"""Fungsi describe() memberikan informasi statistik pada masing-masing kolom, antara lain:

- Count  adalah jumlah sampel pada data.
- Mean adalah nilai rata-rata.
- Std adalah standar deviasi.
- Min yaitu nilai minimum setiap kolom.
- 25% adalah kuartil pertama. Kuartil adalah nilai yang menandai batas interval dalam empat bagian sebaran yang sama.
- 50% adalah kuartil kedua, atau biasa juga disebut median (nilai tengah).
- 75% adalah kuartil ketiga.
- Max adalah nilai maksimum.

4. Boxplots for Outlier Detection
"""

sns.boxplot(x=df['age'])

sns.boxplot(x=df['bmi'])

sns.boxplot(x=df['children'])

sns.boxplot(x=df['children'])

"""5. Outlier Removal (for 'bmi')"""

for col in ['bmi']:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    df = df[(df[col] >= (Q1 - 1.5 * IQR)) & (df[col] <= (Q3 + 1.5 * IQR))]

print("Setelah hapus outlier (bmi):", df.shape)

"""Dataset sekarang telah bersih dan memiliki 1.329 sampel.

6. Categorical Feature Distribution
"""

feature = 'sex'
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_sex = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df_sex)
count.plot(kind='bar', title=feature)
plt.show()

feature = 'smoker'
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_smoker = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df_smoker)
count.plot(kind='bar', title=feature)
plt.show()

feature = 'region'
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_region = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(df_region)
count.plot(kind='bar', title=feature)
plt.show()

"""Rata-rata 'charges' berdasarkan fitur kategori"""

cat_features = ['sex', 'smoker', 'region']
for col in cat_features:
    sns.catplot(x=col, y="charges", kind="bar", dodge=False, height=4, aspect=2.5, data=df, palette="Set3")
    plt.title(f"Rata-rata 'charges' Relatif terhadap - {col}")
    plt.show()

"""7. Histogram & Correlation Matrix"""

df.hist(bins=50, figsize=(20, 15))
plt.show()

sns.pairplot(df, hue='smoker')
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Matrix")
plt.show()

"""Pairplot untuk fitur numerik"""

sns.pairplot(df, diag_kind='kde')
plt.suptitle("Pairplot Fitur Numerik", y=1.02)
plt.show()

plt.figure(figsize=(10, 8))
numerical_features = ['age', 'bmi', 'children', 'charges']
correlation_matrix = df[numerical_features].corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Matrix untuk Fitur Numerik", size=16)
plt.show()

"""**Analisis Korelasi Fitur Numerik terhadap charges**

Analisis korelasi dilakukan untuk mengetahui hubungan antara fitur numerik dengan target `charges`. Hasilnya menunjukkan bahwa:

- `age` memiliki korelasi lemah hingga sedang terhadap `charges` (0.30), sehingga tetap dipertahankan karena masih memberikan kontribusi informasi yang berarti.

- `bmi` dan `children` memiliki korelasi yang sangat lemah terhadap `charges` (masing-masing 0.19 dan 0.07), sehingga keduanya dapat dipertimbangkan untuk dihapus demi menyederhanakan model tanpa mengorbankan performa prediksi secara signifikan.

Penghapusan fitur dilakukan untuk menyederhanakan model dan mengurangi noise dari fitur yang tidak berkontribusi besar terhadap prediksi.

a. Drop fitur dengan korelasi rendah
"""

# Drop fitur numerik dengan korelasi rendah terhadap target 'charges'
df.drop(['bmi', 'children'], axis=1, inplace=True)
print("Fitur 'bmi' dan 'children' dihapus karena korelasi sangat rendah terhadap target 'charges'.")

"""b. Update fitur numerik untuk scaling"""

# Feature Scaling hanya untuk 'age' karena 'bmi' dan 'children' sudah dihapus
X = df.drop('charges', axis=1)
y = df['charges']
numerical_features = ['age']  # hanya age tersisa

"""8. One-Hot Encoding"""

categorical_features = ['sex', 'smoker', 'region']
df = pd.get_dummies(df, columns=categorical_features, drop_first=True)

"""9. Feature Scaling"""

X = df.drop('charges', axis=1)
y = df['charges']
numerical_features = [col for col in ['age'] if col in X.columns]

"""10. Train-Test Split"""

X = df.drop('charges', axis=1)
y = df['charges']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""11. Standarisasi fitur numerik"""

numerical_features = ['age']  # hanya 'age' yang tersisa sebagai fitur numerik
scaler = StandardScaler()

# Fit hanya pada data latih
  scaler.fit(X_train[numerical_features])

  # Transform pada data latih dan data uji
  X_train[numerical_features] = scaler.transform(X_train[numerical_features])
  X_test[numerical_features] = scaler.transform(X_test[numerical_features])

"""11. Train Models

KNN
"""

# Siapkan dataframe hasil evaluasi model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting'])

# Inisialisasi model KNN dengan k = 10 dan metrik Euclidean (default)
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

# Prediksi data latih
y_train_pred = knn.predict(X_train)

# Simpan hasil MSE data latih ke dataframe models
models.loc['train_mse', 'KNN'] = mean_squared_error(y_train, y_train_pred)

# Lihat hasil sementara
print("Train MSE KNN:", models.loc['train_mse', 'KNN'])

"""Random Forest"""

# Buat dan latih model Random Forest
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

# Prediksi pada data latih
y_train_pred_rf = RF.predict(X_train)

# Simpan hasil MSE ke dalam dataframe models
models.loc['train_mse', 'RandomForest'] = mean_squared_error(y_train, y_train_pred_rf)

# Lihat hasil sementara
print("Train MSE Random Forest:", models.loc['train_mse', 'RandomForest'])

"""AdaBoost"""

# Buat dan latih model AdaBoost
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)
boosting.fit(X_train, y_train)

# Prediksi pada data latih
y_train_pred_boost = boosting.predict(X_train)

# Simpan hasil MSE ke dalam dataframe models
models.loc['train_mse', 'Boosting'] = mean_squared_error(y_train, y_train_pred_boost)

# Lihat hasil sementara
print("Train MSE AdaBoost:", models.loc['train_mse', 'Boosting'])

# Scaling data uji (X_test) menggunakan scaler dari data latih
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""12. Evaluasi Model dengan MSE"""

# Buat dataframe untuk menyimpan nilai MSE
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])

# Dictionary model
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

# Hitung MSE dan simpan dalam dataframe
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train)) / 1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test)) / 1e3

# Tampilkan hasil
print(mse)

"""12. Visualisasi MSE"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3, color=['skyblue', 'orange'])
ax.set_title('MSE pada Data Train dan Test (x1000)')
ax.set_xlabel('Mean Squared Error (x1000)')
ax.grid(zorder=0)
plt.show()

"""13. Prediksi Data Uji"""

# Ambil satu baris pertama dari data uji
prediksi = X_test.iloc[:1].copy()

# Simpan hasil prediksi dalam dictionary
pred_dict = {'y_true': y_test[:1].values}
for name, model in model_dict.items():
    pred_dict['prediksi_' + name] = model.predict(prediksi).round(1)

# Tampilkan dalam DataFrame
pd.DataFrame(pred_dict)
